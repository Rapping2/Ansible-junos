---
- name: Juniper switch check
  hosts: Juniper
  roles:
    - Juniper.junos
  connection: local
  gather_facts: no

  tasks:
    - name: Make Config Backup Directory
      local_action:
        module: file
        path: "Backup/{{ lookup('pipe', 'date +%Y%m%d') }}"
        state: directory
        mode: u=rwX,g=rX,o=rX

    - name: Input Check CLI
      juniper_junos_command:
        commands:
          - "show chassis routing-engine"
          - "show chassis environment"
          - "show system alarm"
          - "show interfaces extensive"
          - "show log messages"
        dest: "Backup/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname}}.txt"

    - name: Read file1
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt
      register: TMP1

    - name: Alarm check
      debug: msg="{% if 'No alarms currently active' in TMP1.stdout %}Good{% else %}ALM check{% endif %}"
      register: alarm
      ignore_errors: True

    - name: read file2
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt
      ignore_errors: True
      register: TMP2

    - name: Module check
      debug: msg="{% if 'Check' in TMP2.stdout %}Module check{% elif 'Absent' in TMP2.stdout %}Module check{% elif 'Present' in TMP2.stdout %}Module check{% else %}Good{% endif %}"
      ignore_errors: True
      register: module

    - name: read file3
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Power
      ignore_errors: True
      register: TMP3

    - name: Power check
      debug: msg="{% if 'Check' in TMP3.stdout %}Power check{% elif 'Absent' in TMP3.stdout %}Power check{% elif 'Present' in TMP3.stdout %}Power check{% else %}Good{% endif %}"
      ignore_errors: True
      register: power

    - name: read file2_2
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Fan
      ignore_errors: True
      register: TMP3

    - name: FAN check
      debug: msg="{% if 'Spinning at normal speed' in TMP3.stdout %}Good{% else %}FAN check{% endif %}"
      ignore_errors: True
      register: fan

    - name: Memory check
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Memory | awk '{print $3"%"; exit}'
      ignore_errors: True
      register: memory

    - name: CPU check
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Idle | awk '{print 100 - $2"%"; exit}'
      ignore_errors: True
      register: cpu

    - name: Port check
      shell: cat Backup/$(date +%Y%m%d)/{{ inventory_hostname }}.txt | grep Framing | awk '$2 > 100 {print "Port check"}'
      ignore_errors: True
      register: TMP4

    - name: Port result
      debug: msg="{% if 'Port check' in TMP4.stdout %}Port check{% else %}OK{% endif %}"
      register: port
      ignore_errors: True

    - name: Gather_fact1
      junos_get_facts:
      register: junos

    - name: Print fact1
      debug: msg="{{junos.facts.hostname}}"
      register: hostname

    - name: Print fact2
      debug: msg="{{junos.facts.model}}"
      register: model

    - name: Print fact3
      debug: msg="{{junos.facts.serialnumber}}"
      register: serial

    - name: Print fact4
      debug: msg="{{junos.facts.version}}"
      register: version

    - name: Log check
      debug: msg="{% if 'crash' in TMP1.stdout %}Log check{% elif 'license' in TMP1.stdout %}License check{% else %}None{% endif %}"
      register: log
      ignore_errors: True

    - name: Make Result Directory
      local_action:
        module: file
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        state: directory
        mode: u=rwX,g=rX,o=rX

    - name: Result summary
      local_action:
        copy content="{{hostname}}|{{inventory_hostname}}|{{model}}|{{serial}}|{{memory.stdout}}|{{cpu.stdout}}|{{module}}|{{power}}|{{fan}}|{{port}}|{{version}}|{{log}}|{{alarm}}\n"
        dest="Result/{{ lookup('pipe', 'date +%Y%m%d') }}/{{ inventory_hostname }}.txt"

    - name: Assemble from fragments from a directory
      assemble:
        src: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}"
        dest: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
      ignore_errors: True

    - name: Result modify1
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'msg': u'"
        replace: ""

    - name: Result modify2
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'skip_reason': u'Conditional result was False', 'skipped': True, 'changed': False"
        replace: "skip"

    - name: Result modify3
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "'failed': False, 'changed': False"
        replace: ""

    - name: Result modify4
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "',"
        replace: ""

    - name: Result modify5
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "{"
        replace: ""

    - name: Result modify6
      replace:
        path: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        regexp: "}"
        replace: ""

    - name: Read users from CSV file and return a list
      copy:
        src: "Result/{{ lookup('pipe', 'date +%Y%m%d') }}_Result_summary.txt"
        remote_src: yes
        dest: "Result/ResultSUM.csv"
